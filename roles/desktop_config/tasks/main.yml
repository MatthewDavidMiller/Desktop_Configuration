---
- name: locale configuration
  ansible.builtin.template:
    src: locale.j2
    dest: /etc/locale.conf
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: generate locale
  ansible.builtin.shell:
    cmd: |
      locale-gen
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enabe multilib repo
  ansible.builtin.blockinfile:
    path: "/etc/pacman.conf"
    block: |
      [multilib]
      Include = /etc/pacman.d/mirrorlist
    marker: "{mark}"
    marker_begin: "# Enable multilib"
    marker_end: "#=================================================================================================================="
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Install packages
  ansible.builtin.shell:
    cmd: |
      pacman -S --noconfirm --needed "{{ item }}"
  loop: "{{ packages }}"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Set the timezone
  community.general.timezone:
    name: US/Eastern
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Check if swap file exists
  ansible.builtin.stat:
    path: /swapfile
  register: swapfile_status
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Create swap file
  ansible.builtin.shell:
    cmd: |
      dd if=/dev/zero of=/swapfile bs=1M count={{ swap_file_size }} status=progress
  when:
    - ansible_facts['distribution'] == 'Archlinux'
    - swapfile_status.stat.exists == false

- name: Set swap file permissions
  ansible.builtin.file:
    path: /swapfile
    owner: root
    group: root
    mode: "0677"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Set file as swap file
  ansible.builtin.shell:
    cmd: |
      mkswap /swapfile
  when:
    - swapfile_status.stat.exists == false
    - ansible_facts['distribution'] == 'Archlinux'

- name: Turn on swapfile
  ansible.builtin.shell:
    cmd: |
      swapon /swapfile
  when:
    - swapfile_status.stat.exists == false
    - ansible_facts['distribution'] == 'Archlinux'

- name: Add swapfile to fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    line: /swapfile none swap defaults 0 0
    create: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Create sway config path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/.config/sway"
    state: directory
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Sway configuration
  ansible.builtin.template:
    src: sway.j2
    dest: /home/{{ user_name }}/.config/sway/config
    owner: "{{ user_name }}"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Sway autostart script
  ansible.builtin.template:
    src: sway_autostart.j2
    dest: /usr/local/bin/sway_autostart.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Create user profile path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/.profile"
    state: touch
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Autostart sway at login
  ansible.builtin.blockinfile:
    path: "/home/{{ user_name }}/.profile"
    block: |
      # If running from tty1 start sway
      if [ "$(tty)" = "/dev/tty1" ]; then
      exec sway
      fi
    marker: "{mark}"
    marker_begin: "# Autostart Sway"
    marker_end: "#=================================================================================================================="
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Flush Iptables rules
  ansible.builtin.iptables:
    chain: "{{ item }}"
    flush: yes
  with_items: ["INPUT", "FORWARD", "OUTPUT"]

- name: Allow icmp
  ansible.builtin.iptables:
    chain: INPUT
    protocol: icmp
    source: "{{ network_prefix }}"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow icmpv6
  ansible.builtin.iptables:
    chain: INPUT
    protocol: icmpv6
    source: "fe80::/10"
    in_interface: "{{ interface_name }}"
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow loopback
  ansible.builtin.iptables:
    chain: INPUT
    source: "127.0.0.1"
    in_interface: lo
    jump: ACCEPT
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow loopback ipv6
  ansible.builtin.iptables:
    chain: INPUT
    source: "::1"
    in_interface: lo
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow established connections
  ansible.builtin.iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Drop inbound by default
  ansible.builtin.iptables:
    chain: INPUT
    policy: DROP
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow outbound by default
  ansible.builtin.iptables:
    chain: OUTPUT
    policy: ACCEPT
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Drop forwarding by default
  ansible.builtin.iptables:
    chain: FORWARD
    policy: DROP
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow established connections ipv6
  ansible.builtin.iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    ip_version: ipv6
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Drop inbound by default ipv6
  ansible.builtin.iptables:
    chain: INPUT
    policy: DROP
    ip_version: ipv6
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow outbound by default ipv6
  ansible.builtin.iptables:
    chain: OUTPUT
    policy: ACCEPT
    ip_version: ipv6
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Drop forwarding by default ipv6
  ansible.builtin.iptables:
    chain: FORWARD
    policy: DROP
    ip_version: ipv6
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Save Iptables Rules
  community.general.iptables_state:
    ip_version: ipv4
    table: filter
    state: saved
    path: /etc/iptables/rules.v4
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Save Iptables Rules ipv6
  community.general.iptables_state:
    ip_version: ipv6
    table: filter
    state: saved
    path: /etc/iptables/rules.v6
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable iptables
  ansible.builtin.systemd:
    name: iptables.service
    enabled: yes

- name: Enable ip6tables
  ansible.builtin.systemd:
    name: ip6tables.service
    enabled: yes

- name: Configure git
  ansible.builtin.shell:
    cmd: |
      git config --global user.name {{ git_name }}
      git config --global user.email {{ email }}
      git config --global core.sshCommand "ssh -i /home/{{ user_name }}/.ssh/{{ key }} -F /dev/null"
  become_user: "{{ user_name }}"
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Aur build path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/aur"
    state: directory
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Vscode aur build
  ansible.builtin.template:
    src: vscode_aur.j2
    dest: /home/{{ user_name }}/aur/vscode.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Spotify aur build
  ansible.builtin.template:
    src: spotify_aur.j2
    dest: /home/{{ user_name }}/aur/spotify.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: PowerShell aur build
  ansible.builtin.template:
    src: powershell_aur.j2
    dest: /home/{{ user_name }}/aur/powershell.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable bluetooth
  ansible.builtin.systemd:
    name: bluetooth.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable paccache
  ansible.builtin.systemd:
    name: paccache.timer
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Getty path
  ansible.builtin.file:
    path: "/etc/systemd/system/getty@tty1.service.d"
    state: directory
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Autologin user
  ansible.builtin.template:
    src: getty_override.j2
    dest: /etc/systemd/system/getty@tty1.service.d/override.conf
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Pacman hooks path
  ansible.builtin.file:
    path: "/etc/pacman.d/hooks"
    state: directory
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: fwupd configuration
  ansible.builtin.template:
    src: fwupd.j2
    dest: /etc/pacman.d/hooks/fwupd-to-esp.hook
  when: ansible_facts['distribution'] == 'Archlinux'

- name: fwupd copy
  ansible.builtin.copy:
    src: /usr/lib/fwupd/efi/fwupdx64.efi
    dest: /boot/EFI/

- name: reflector configuration
  ansible.builtin.template:
    src: reflector.j2
    dest: /etc/xdg/reflector/reflector.conf
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable reflector
  ansible.builtin.systemd:
    name: reflector.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: env backup script
  ansible.builtin.template:
    src: backup_env.j2
    dest: /usr/local/bin/backup_env.sh
  when: ansible_facts['distribution'] == 'Archlinux'
