# Credits
# https://stackoverflow.com/questions/37147949/how-to-use-variable-in-when-statement-in-ansible
# https://github.com/swaywm/sway/wiki
---
- name: locale configuration
  ansible.builtin.template:
    src: locale.j2
    dest: /etc/locale.conf
    owner: root
    group: root
    mode: "0644"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: generate locale
  ansible.builtin.shell:
    cmd: |
      locale-gen
  become: "yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable multilib repo
  ansible.builtin.blockinfile:
    path: "/etc/pacman.conf"
    block: |
      [multilib]
      Include = /etc/pacman.d/mirrorlist
    marker: "{mark}"
    marker_begin: "# Enable multilib"
    marker_end: "#=================================================================================================================="
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Install packages universal
  ansible.builtin.shell:
    cmd: |
      pacman -S --noconfirm --needed "{{ item }}"
  loop: "{{ universal_packages }}"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable firewalld
  ansible.builtin.systemd:
    name: firewalld.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable apparmor
  ansible.builtin.systemd:
    name: apparmor.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Set default action for public to drop
  ansible.posix.firewalld:
    zone: public
    target: DROP
    permanent: yes
    state: present
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Disable SSH in default zone
  ansible.posix.firewalld:
    zone: public
    service: ssh
    permanent: yes
    state: disabled
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Disable dhcpv6-client in default zone
  ansible.posix.firewalld:
    zone: public
    service: dhcpv6-client
    permanent: yes
    state: disabled
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Disable mdns in default zone
  ansible.posix.firewalld:
    zone: public
    service: mdns
    permanent: yes
    state: disabled
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Set the timezone
  community.general.timezone:
    name: US/Eastern
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Create user profile path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/.profile"
    state: touch
  become: yes
  become_user: "{{ user_name }}"
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Configure git
  ansible.builtin.shell:
    cmd: |
      git config --global user.name {{ git_name }}
      git config --global user.email {{ email }}
      git config --global core.sshCommand "ssh -i /home/{{ user_name }}/.ssh/{{ key }} -F /dev/null"
  become: yes
  become_user: "{{ user_name }}"
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Create config path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/.config/psd/psd.conf"
    state: touch
  become: yes
  become_user: "{{ user_name }}"
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: psd config
  ansible.builtin.blockinfile:
    path: /home/{{ user_name }}/.config/psd/psd.conf
    marker: "{mark}"
    marker_begin: "# Psd Config"
    marker_end: "#=================================================================================================================="
    block: |
      USE_OVERLAYFS="yes"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Aur build path
  ansible.builtin.file:
    path: "/home/{{ user_name }}/aur"
    state: directory
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Vscode aur build
  ansible.builtin.template:
    src: vscode_aur.j2
    dest: /home/{{ user_name }}/aur/vscode.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Spotify aur build
  ansible.builtin.template:
    src: spotify_aur.j2
    dest: /home/{{ user_name }}/aur/spotify.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: PowerShell aur build
  ansible.builtin.template:
    src: powershell_aur.j2
    dest: /home/{{ user_name }}/aur/powershell.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable bluetooth
  ansible.builtin.systemd:
    name: bluetooth.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable paccache
  ansible.builtin.systemd:
    name: paccache.timer
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable psd
  ansible.builtin.systemd:
    name: psd.service
    enabled: yes
    scope: user
  become: yes
  become_user: "{{ user_name }}"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Pacman hooks path
  ansible.builtin.file:
    path: "/etc/pacman.d/hooks"
    state: directory
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: fwupd configuration
  ansible.builtin.template:
    src: fwupd.j2
    dest: /etc/pacman.d/hooks/fwupd-to-esp.hook
  when: ansible_facts['distribution'] == 'Archlinux'

- name: fwupd copy
  ansible.builtin.copy:
    src: /usr/lib/fwupd/efi/fwupdx64.efi
    dest: /boot/EFI/
  when: ansible_facts['distribution'] == 'Archlinux'

- name: reflector configuration
  ansible.builtin.template:
    src: reflector.j2
    dest: /etc/xdg/reflector/reflector.conf
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable reflector
  ansible.builtin.systemd:
    name: reflector.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable gdm
  ansible.builtin.systemd:
    name: gdm.service
    enabled: yes
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: env backup script
  ansible.builtin.template:
    src: backup_env.j2
    dest: /usr/local/bin/backup_env.sh
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable cups
  ansible.builtin.systemd:
    name: cups.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable virt manager
  ansible.builtin.systemd:
    name: libvirtd.service
    enabled: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: set libvirt socket group
  ansible.builtin.lineinfile:
    path: /etc/libvirt/libvirtd.conf
    regexp: ^#?unix_sock_group =
    line: unix_sock_group = "libvirt"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: set libvirt socket permissions
  ansible.builtin.lineinfile:
    path: /etc/libvirt/libvirtd.conf
    regexp: ^#?unix_sock_rw_perms =
    line: unix_sock_rw_perms = "0770"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Add libviirt group
  ansible.builtin.group:
    name: libvirt
    state: present
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Add sudo group
  ansible.builtin.group:
    name: sudo
    state: present
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Add user to libvirt and sudo group
  ansible.builtin.user:
    name: "{{ user_name }}"
    groups: libvirt,sudo
    append: yes
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Set user home ownership to user
  ansible.builtin.shell:
    cmd: |
      chown -R {{ user_name }}:{{ user_name }} /home/{{ user_name }}
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: rpi-imager aur build
  ansible.builtin.template:
    src: rpi_imager_aur.j2
    dest: /home/{{ user_name }}/aur/rpi_imager.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow sudo group in sudo
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    regexp: '^\s*#*\s*%sudo\s*ALL=\(ALL\)\s*ALL'
    line: "%sudo   ALL=(ALL) ALL"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Allow user access to profile sync daemon
  ansible.builtin.blockinfile:
    path: /etc/sudoers
    marker: "{mark}"
    marker_begin: "# Profile sync daemon"
    marker_end: "#=================================================================================================================="
    block: |
      {{ user_name }} ALL=(ALL) NOPASSWD: /usr/bin/psd-overlay-helper
  when: ansible_facts['distribution'] == 'Archlinux'

- name: paru aur build
  ansible.builtin.template:
    src: paru.j2
    dest: /home/{{ user_name }}/aur/paru.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: openwrt image builder
  ansible.builtin.template:
    src: build_openwrt_image.j2
    dest: /usr/local/bin/build_openwrt_image.sh
    owner: "{{ user_name }}"
    mode: "0744"
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Add terminal text
  ansible.builtin.blockinfile:
    path: "/home/{{ user_name }}/.bashrc"
    block: "{{ custom_terminal_text }}"
    marker: "{mark}"
    marker_begin: "# Custom Terminal Text"
    marker_end: "#=================================================================================================================="
  when:
    - ansible_facts['distribution'] == 'Archlinux'

- name: Confiure firejail
  ansible.builtin.lineinfile:
    path: /etc/firejail/firecfg.config
    regexp: ^steam
    line: #{{ item }}
  loop:
    - steam
    - steam-native
    - steam-runtime
  when: ansible_facts['distribution'] == 'Archlinux'

- name: Enable firejail by default
  ansible.builtin.shell:
    cmd: |
      apparmor_parser -r /etc/apparmor.d/firejail-default
      firecfg
  when: ansible_facts['distribution'] == 'Archlinux'
